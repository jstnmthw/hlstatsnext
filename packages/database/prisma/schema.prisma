// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientImport = "../generated"
  output       = "../generated/graphql/pothos-types.ts"
}

generator pothosCodegen {
  provider            = "prisma-generator-pothos-codegen"
  generatorConfigPath = "../src/pothos.config.mjs"
}

// GeoIP Tables
model GeoLiteCityBlock {
  startIpNum BigInt @map("start_ip_num") @db.UnsignedBigInt
  endIpNum   BigInt @map("end_ip_num") @db.UnsignedBigInt
  locId      BigInt @map("loc_id") @db.UnsignedBigInt

  location GeoLiteCityLocation @relation(fields: [locId], references: [locId])

  @@id([startIpNum, endIpNum])
  @@map("geo_lite_city_block")
}

model GeoLiteCityLocation {
  locId      BigInt   @id @map("loc_id") @db.UnsignedBigInt
  country    String   @db.VarChar(2)
  region     String?  @db.VarChar(50)
  city       String?  @db.VarChar(50)
  postalCode String?  @map("postal_code") @db.VarChar(10)
  latitude   Decimal? @db.Decimal(14, 4)
  longitude  Decimal? @db.Decimal(14, 4)

  blocks GeoLiteCityBlock[]

  @@map("geo_lite_city_location")
}

// Core Tables
model Game {
  code     String @id // Primary key, e.g., "tf", "css", "csgo"
  name     String @db.VarChar(128) // e.g., "Team Fortress 2"
  hidden   String @default("0") @db.VarChar(1) // enum('0','1') in MySQL
  realgame String @default("hl2mp") @db.VarChar(32) // Engine type: "tf", "css", etc.

  // Relationships
  players Player[]
  clans   Clan[]

  @@map("games")
}

model Country {
  flag String @id @db.VarChar(16) // "US", "CA", etc.
  name String @db.VarChar(50) // "United States", "Canada"

  // Relationships
  players Player[]

  @@map("countries")
}

model Clan {
  clanId    Int    @id @default(autoincrement()) @db.UnsignedInt
  tag       String @default("") @db.VarChar(64) // Clan tag like "[TAG]"
  name      String @default("") @db.VarChar(128) // Full clan name
  homepage  String @default("") @db.VarChar(64) // Clan website
  game      String @default("") @db.VarChar(32)
  hidden    Int    @default(0) @db.UnsignedTinyInt // tinyint(3) unsigned
  mapregion String @default("") @db.VarChar(128) // Geographic region

  // Relationships
  players  Player[]
  gameData Game     @relation(fields: [game], references: [code], onDelete: Cascade)

  // Constraints
  @@unique([game, tag], name: "game_tag") // Unique tag per game
  @@index([game], name: "game")
  @@map("clans")
}

model Player {
  playerId Int  @id @default(autoincrement()) @map("player_id") @db.UnsignedInt
  clanId   Int? @map("clan_id") @db.UnsignedInt

  // Identity
  lastName    String  @default("") @map("last_name") @db.VarChar(64) // Current display name
  lastAddress String  @default("") @map("last_address") @db.VarChar(32) // Last known IP address
  fullName    String? @map("full_name") @db.VarChar(128) // Optional full/real name
  email       String? @map("email") @db.VarChar(64) // Optional email

  // Event tracking
  lastEvent       DateTime? @map("last_event") @db.DateTime(0)
  lastSkillChange DateTime? @map("last_skill_change") @db.DateTime(0)
  connectionTime  Int       @default(0) @map("connection_time") @db.UnsignedInt

  // Location data
  city    String  @default("") @db.VarChar(64)
  state   String  @default("") @db.VarChar(64)
  country String  @default("") @db.VarChar(64)
  flag    String? @db.VarChar(16)
  lat     Float?  @db.Float
  lng     Float?  @db.Float

  // Country relationship
  countryData Country? @relation(fields: [flag], references: [flag])

  // Clan relationship
  clan Clan? @relation(fields: [clanId], references: [clanId])

  // Core statistics
  kills     Int @default(0) @db.UnsignedInt
  deaths    Int @default(0) @db.UnsignedInt
  suicides  Int @default(0) @db.UnsignedInt
  skill     Int @default(1000) @db.UnsignedInt // ELO-style rating
  shots     Int @default(0) @db.UnsignedInt
  hits      Int @default(0) @db.UnsignedInt
  teamkills Int @default(0) @db.UnsignedInt
  headshots Int @default(0) @db.UnsignedInt

  // Streaks and activity
  killStreak  Int @default(0) @map("kill_streak") @db.Int
  deathStreak Int @default(0) @map("death_streak") @db.Int
  activity    Int @default(100) @db.Int

  // Game relationship
  game     String @db.VarChar(32)
  gameData Game   @relation(fields: [game], references: [code], onDelete: Cascade)

  // Player preferences
  hideRanking   Int @default(0) @map("hide_ranking") @db.UnsignedInt // int(1) unsigned
  displayEvents Int @default(1) @map("display_events") @db.UnsignedInt // int(1) unsigned
  blockAvatar   Int @default(0) @map("block_avatar") @db.UnsignedInt // int(1) unsigned

  // Additional fields
  mmrank    Int?      @map("mm_rank") @db.TinyInt // Matchmaking rank
  createdAt DateTime? @map("created_at") @db.DateTime(0)

  // Relationships
  uniqueIds                   PlayerUniqueId[]
  awardsWonAsDWinner          Award[]                   @relation("AwardDWinner")
  awardsWonAsGWinner          Award[]                   @relation("AwardGWinner")
  nameChanges                 EventChangeName[]
  roleChanges                 EventChangeRole[]
  teamChanges                 EventChangeTeam[]
  chats                       EventChat[]
  connects                    EventConnect[]
  disconnects                 EventDisconnect[]
  entries                     EventEntry[]
  fragsAsKiller               EventFrag[]               @relation("FragsAsKiller")
  fragsAsVictim               EventFrag[]               @relation("FragsAsVictim")
  latencyEvents               EventLatency[]
  playerActions               EventPlayerAction[]
  playerPlayerActionsAsActor  EventPlayerPlayerAction[] @relation("PPA_Actor")
  playerPlayerActionsAsVictim EventPlayerPlayerAction[] @relation("PPA_Victim")
  suicideEvents               EventSuicide[]
  teamBonuses                 EventTeamBonus[]
  teamkillsAsKiller           EventTeamkill[]           @relation("TK_Killer")
  teamkillsAsVictim           EventTeamkill[]           @relation("TK_Victim")
  awards                      PlayerAward[]
  history                     PlayerHistory[]
  ribbons                     PlayerRibbon[]
  names                       PlayerName[]
  user                        User?

  // Indexes for performance
  @@index([clanId], name: "playerclan")
  @@index([skill], name: "skill")
  @@index([game], name: "game")
  @@index([kills], name: "kills")
  @@index([hideRanking], name: "hide_ranking")
  @@map("players")
}

model PlayerUniqueId {
  playerId Int    @map("player_id") @db.UnsignedInt
  player   Player @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
  uniqueId String @default("") @map("unique_id") @db.VarChar(64) // Steam ID, Discord ID, etc.
  game     String @default("") @db.VarChar(32) // Which game this ID is for
  merge    Int?   @db.UnsignedInt // For account merging functionality

  // Constraints - unique ID per game (PRIMARY KEY in legacy)
  @@id([uniqueId, game])
  @@index([playerId], name: "playerId")
  @@map("player_unique_ids")
}

model Action {
  id                     Int     @id @default(autoincrement()) @db.UnsignedInt
  game                   String  @default("valve") @db.VarChar(32)
  code                   String  @default("") @db.VarChar(64)
  rewardPlayer           Int     @default(10) @map("reward_player")
  rewardTeam             Int     @default(0) @map("reward_team")
  team                   String  @default("") @db.VarChar(64)
  description            String? @db.VarChar(128)
  forPlayerActions       String  @default("0") @map("for_player_actions") @db.VarChar(1) // ENUM('0','1')
  forPlayerPlayerActions String  @default("0") @map("for_player_player_actions") @db.VarChar(1) // ENUM('0','1')
  forTeamActions         String  @default("0") @map("for_team_actions") @db.VarChar(1) // ENUM('0','1')
  forWorldActions        String  @default("0") @map("for_world_actions") @db.VarChar(1) // ENUM('0','1')
  count                  Int     @default(0) @db.UnsignedInt

  eventPlayerActions       EventPlayerAction[]
  eventPlayerPlayerActions EventPlayerPlayerAction[]
  eventTeamBonuses         EventTeamBonus[]
  eventWorldActions        EventWorldAction[]

  @@unique([code, game, team], name: "gamecode")
  @@index([code])
  @@map("actions")
}

model Award {
  awardId      Int    @id @default(autoincrement()) @db.UnsignedInt
  awardType    String @default("W") @map("award_type") @db.Char(1)
  game         String @default("valve") @db.VarChar(32)
  code         String @default("") @db.VarChar(128)
  name         String @default("") @db.VarChar(128)
  verb         String @default("") @db.VarChar(128)
  dWinnerId    Int?   @map("d_winner_id") @db.UnsignedInt
  dWinnerCount Int?   @map("d_winner_count") @db.UnsignedInt
  gWinnerId    Int?   @map("g_winner_id") @db.UnsignedInt
  gWinnerCount Int?   @map("g_winner_count") @db.UnsignedInt

  dWinner      Player?       @relation("AwardDWinner", fields: [dWinnerId], references: [playerId])
  gWinner      Player?       @relation("AwardGWinner", fields: [gWinnerId], references: [playerId])
  playerAwards PlayerAward[]

  @@unique([game, awardType, code], name: "game_awardType_code")
  @@map("awards")
}

enum ClanTagPosition {
  EITHER
  START
  END
}

model ClanTag {
  id       Int             @id @default(autoincrement()) @db.UnsignedInt
  pattern  String          @unique @db.VarChar(64)
  position ClanTagPosition @default(EITHER)

  @@map("clan_tags")
}

// Event Tables
model EventAdmin {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime  DateTime? @map("event_time") @db.DateTime(0)
  serverId   Int       @default(0) @map("server_id") @db.UnsignedInt
  map        String    @default("") @db.VarChar(64)
  type       String    @default("Unknown") @db.VarChar(64)
  message    String    @default("") @db.VarChar(255)
  playerName String    @default("") @map("player_name") @db.VarChar(64)

  server Server @relation(fields: [serverId], references: [serverId])

  @@map("events_admin")
}

model EventChangeName {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime? @map("event_time") @db.DateTime(0)
  serverId  Int       @default(0) @map("server_id") @db.UnsignedInt
  map       String    @default("") @db.VarChar(64)
  playerId  Int       @default(0) @map("player_id") @db.UnsignedInt
  oldName   String    @default("") @map("old_name") @db.VarChar(64)
  newName   String    @default("") @map("new_name") @db.VarChar(64)

  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@map("events_change_name")
}

model EventChangeRole {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime? @map("event_time") @db.DateTime(0)
  serverId  Int       @default(0) @map("server_id") @db.UnsignedInt
  map       String    @default("") @db.VarChar(64)
  playerId  Int       @default(0) @map("player_id") @db.UnsignedInt
  role      String    @default("") @db.VarChar(64)

  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@map("events_change_role")
}

model EventChangeTeam {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime? @map("event_time") @db.DateTime(0)
  serverId  Int       @default(0) @map("server_id") @db.UnsignedInt
  map       String    @default("") @db.VarChar(64)
  playerId  Int       @default(0) @map("player_id") @db.UnsignedInt
  team      String    @default("") @db.VarChar(64)

  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@map("events_change_team")
}

model EventChat {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime   DateTime? @map("event_time") @db.DateTime(0)
  serverId    Int       @default(0) @map("server_id") @db.UnsignedInt
  map         String    @default("") @db.VarChar(64)
  playerId    Int       @default(0) @map("player_id") @db.UnsignedInt
  messageMode Int       @default(0) @map("message_mode") @db.TinyInt
  message     String    @default("") @db.VarChar(128)

  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@index([serverId])
  @@fulltext([message])
  @@map("events_chat")
}

model EventConnect {
  id                  Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime           DateTime? @map("event_time") @db.DateTime(0)
  serverId            Int       @default(0) @map("server_id") @db.UnsignedInt
  map                 String    @default("") @db.VarChar(64)
  playerId            Int       @default(0) @map("player_id") @db.UnsignedInt
  ipAddress           String    @default("") @map("ip_address") @db.VarChar(32)
  hostname            String    @default("") @db.VarChar(255)
  hostgroup           String    @default("") @db.VarChar(255)
  eventTimeDisconnect DateTime? @map("event_time_disconnect") @db.DateTime(0)

  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@map("events_connect")
}

model EventDisconnect {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime? @map("event_time") @db.DateTime(0)
  serverId  Int       @default(0) @map("server_id") @db.UnsignedInt
  map       String    @default("") @db.VarChar(64)
  playerId  Int       @default(0) @map("player_id") @db.UnsignedInt

  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@map("events_disconnect")
}

model EventEntry {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime? @map("event_time") @db.DateTime(0)
  serverId  Int       @default(0) @map("server_id") @db.UnsignedInt
  map       String    @default("") @db.VarChar(64)
  playerId  Int       @default(0) @map("player_id") @db.UnsignedInt

  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@map("events_entry")
}

model EventFrag {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime  DateTime? @map("event_time") @db.DateTime(0)
  serverId   Int       @default(0) @map("server_id") @db.UnsignedInt
  map        String    @default("") @db.VarChar(64)
  killerId   Int       @default(0) @map("killer_id") @db.UnsignedInt
  victimId   Int       @default(0) @map("victim_id") @db.UnsignedInt
  weapon     String    @default("") @db.VarChar(64)
  headshot   Int       @default(0) @db.TinyInt
  killerRole String    @default("") @map("killer_role") @db.VarChar(64)
  victimRole String    @default("") @map("victim_role") @db.VarChar(64)
  posX       Int?      @map("pos_x") @db.MediumInt
  posY       Int?      @map("pos_y") @db.MediumInt
  posZ       Int?      @map("pos_z") @db.MediumInt
  posVictimX Int?      @map("pos_victim_x") @db.MediumInt
  posVictimY Int?      @map("pos_victim_y") @db.MediumInt
  posVictimZ Int?      @map("pos_victim_z") @db.MediumInt

  killer Player @relation("FragsAsKiller", fields: [killerId], references: [playerId])
  victim Player @relation("FragsAsVictim", fields: [victimId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([killerId])
  @@index([victimId])
  @@index([serverId])
  @@index([headshot])
  @@index([map])
  @@index([weapon])
  @@index([killerRole])
  @@map("events_frag")
}

model EventLatency {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime? @map("event_time") @db.DateTime(0)
  serverId  Int       @default(0) @map("server_id") @db.UnsignedInt
  map       String    @default("") @db.VarChar(64)
  playerId  Int       @default(0) @map("player_id") @db.UnsignedInt
  ping      Int       @default(0) @db.UnsignedInt

  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@map("events_latency")
}

model EventPlayerAction {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime? @map("event_time") @db.DateTime(0)
  serverId  Int       @default(0) @map("server_id") @db.UnsignedInt
  map       String    @default("") @db.VarChar(64)
  playerId  Int       @default(0) @map("player_id") @db.UnsignedInt
  actionId  Int       @default(0) @map("action_id") @db.UnsignedInt
  bonus     Int       @default(0)
  posX      Int?      @map("pos_x") @db.MediumInt
  posY      Int?      @map("pos_y") @db.MediumInt
  posZ      Int?      @map("pos_z") @db.MediumInt

  action Action @relation(fields: [actionId], references: [id])
  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@index([actionId])
  @@map("events_player_action")
}

model EventPlayerPlayerAction {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime  DateTime? @map("event_time") @db.DateTime(0)
  serverId   Int       @default(0) @map("server_id") @db.UnsignedInt
  map        String    @default("") @db.VarChar(64)
  playerId   Int       @default(0) @map("player_id") @db.UnsignedInt
  victimId   Int       @default(0) @map("victim_id") @db.UnsignedInt
  actionId   Int       @default(0) @map("action_id") @db.UnsignedInt
  bonus      Int       @default(0)
  posX       Int?      @map("pos_x") @db.MediumInt
  posY       Int?      @map("pos_y") @db.MediumInt
  posZ       Int?      @map("pos_z") @db.MediumInt
  posVictimX Int?      @map("pos_victim_x") @db.MediumInt
  posVictimY Int?      @map("pos_victim_y") @db.MediumInt
  posVictimZ Int?      @map("pos_victim_z") @db.MediumInt

  action Action @relation(fields: [actionId], references: [id])
  player Player @relation("PPA_Actor", fields: [playerId], references: [playerId])
  victim Player @relation("PPA_Victim", fields: [victimId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@index([actionId])
  @@index([victimId])
  @@map("events_player_player_action")
}

model EventRcon {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime? @map("event_time") @db.DateTime(0)
  serverId  Int       @default(0) @map("server_id") @db.UnsignedInt
  map       String    @default("") @db.VarChar(64)
  type      String    @default("UNK") @db.VarChar(6)
  remoteIp  String    @default("") @map("remote_ip") @db.VarChar(32)
  password  String    @default("") @db.VarChar(128)
  command   String    @default("") @db.VarChar(255)

  server Server @relation(fields: [serverId], references: [serverId])

  @@map("events_rcon")
}

model EventSuicide {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime? @map("event_time") @db.DateTime(0)
  serverId  Int       @default(0) @map("server_id") @db.UnsignedInt
  map       String    @default("") @db.VarChar(64)
  playerId  Int       @default(0) @map("player_id") @db.UnsignedInt
  weapon    String    @default("") @db.VarChar(64)
  posX      Int?      @map("pos_x") @db.MediumInt
  posY      Int?      @map("pos_y") @db.MediumInt
  posZ      Int?      @map("pos_z") @db.MediumInt

  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@map("events_suicide")
}

model EventTeamBonus {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime? @map("event_time") @db.DateTime(0)
  serverId  Int       @default(0) @map("server_id") @db.UnsignedInt
  map       String    @default("") @db.VarChar(64)
  playerId  Int       @default(0) @map("player_id") @db.UnsignedInt
  actionId  Int       @default(0) @map("action_id") @db.UnsignedInt
  bonus     Int       @default(0)

  action Action @relation(fields: [actionId], references: [id])
  player Player @relation(fields: [playerId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([playerId])
  @@index([actionId])
  @@map("events_team_bonus")
}

model EventTeamkill {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  eventTime  DateTime? @map("event_time") @db.DateTime(0)
  serverId   Int       @default(0) @map("server_id") @db.UnsignedInt
  map        String    @default("") @db.VarChar(64)
  killerId   Int       @default(0) @map("killer_id") @db.UnsignedInt
  victimId   Int       @default(0) @map("victim_id") @db.UnsignedInt
  weapon     String    @default("") @db.VarChar(64)
  posX       Int?      @map("pos_x") @db.MediumInt
  posY       Int?      @map("pos_y") @db.MediumInt
  posZ       Int?      @map("pos_z") @db.MediumInt
  posVictimX Int?      @map("pos_victim_x") @db.MediumInt
  posVictimY Int?      @map("pos_victim_y") @db.MediumInt
  posVictimZ Int?      @map("pos_victim_z") @db.MediumInt

  killer Player @relation("TK_Killer", fields: [killerId], references: [playerId])
  victim Player @relation("TK_Victim", fields: [victimId], references: [playerId])
  server Server @relation(fields: [serverId], references: [serverId])

  @@index([killerId])
  @@map("events_teamkill")
}

model EventWorldAction {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  eventTime DateTime @map("event_time") @db.DateTime(0)
  serverId  Int      @map("server_id") @db.UnsignedInt
  map       String   @default("") @db.VarChar(64)
  actionId  Int      @map("action_id") @db.UnsignedInt
  action    Action   @relation(fields: [actionId], references: [id], onDelete: Cascade)
  bonus     Int      @default(0)

  @@index([serverId, eventTime], name: "server_eventTime")
  @@index([actionId], name: "actionId")
  @@map("events_world_action")
}

// Game and Server Config Tables
model GameDefault {
  code      String @db.VarChar(32)
  parameter String @db.VarChar(50)
  value     String @db.VarChar(128)

  @@id([code, parameter])
  @@map("games_defaults")
}

model GameSupported {
  code String @id @db.VarChar(32)
  name String @db.VarChar(128)

  @@map("games_supported")
}

model MapCount {
  rowId     Int    @unique @default(autoincrement()) @map("row_id") @db.UnsignedInt
  game      String @db.VarChar(32)
  map       String @db.VarChar(64)
  kills     Int
  headshots Int

  @@id([game, map])
  @@map("map_counts")
}

model ModDefault {
  code      String @db.VarChar(32)
  parameter String @db.VarChar(50)
  value     String @db.VarChar(128)

  @@id([code, parameter])
  @@map("mods_defaults")
}

model ModSupported {
  code String @id @db.VarChar(32)
  name String @db.VarChar(128)

  @@map("mods_supported")
}

model Option {
  keyname String @id @db.VarChar(32)
  value   String @default("") @db.VarChar(128)
  opttype Int    @default(1) @db.TinyInt

  choices OptionChoice[]

  @@index([opttype])
  @@map("options")
}

model OptionChoice {
  keyname   String @db.VarChar(32)
  value     String @db.VarChar(128)
  text      String @default("") @db.VarChar(128)
  isDefault Int    @default(0) @map("is_default") @db.TinyInt

  option Option @relation(fields: [keyname], references: [keyname])

  @@id([keyname, value])
  @@index([keyname])
  @@map("options_choices")
}

model PlayerName {
  playerId       Int       @map("player_id") @db.UnsignedInt
  name           String    @db.VarChar(64)
  lastUse        DateTime? @map("lastuse") @db.DateTime(0)
  connectionTime Int       @default(0) @map("connection_time") @db.UnsignedInt
  numUses        Int       @default(0) @map("numuses") @db.UnsignedInt
  kills          Int       @default(0) @db.UnsignedInt
  deaths         Int       @default(0) @db.UnsignedInt
  suicides       Int       @default(0) @db.UnsignedInt
  headshots      Int       @default(0) @db.UnsignedInt
  shots          Int       @default(0) @db.UnsignedInt
  hits           Int       @default(0) @db.UnsignedInt

  player Player @relation(fields: [playerId], references: [playerId])

  @@id([playerId, name])
  @@index([name(length: 16)], name: "name16")
  @@map("players_names")
}

model PlayerAward {
  awardTime DateTime @map("award_time") @db.Date
  awardId   Int      @map("award_id") @db.UnsignedInt
  playerId  Int      @map("player_id") @db.UnsignedInt
  count     Int      @default(0) @db.UnsignedInt
  game      String   @db.VarChar(32)

  award  Award  @relation(fields: [awardId], references: [awardId])
  player Player @relation(fields: [playerId], references: [playerId])

  @@id([awardTime, awardId, playerId, game])
  @@map("players_awards")
}

model PlayerHistory {
  playerId       Int      @map("player_id") @db.UnsignedInt
  eventTime      DateTime @map("event_time") @db.Date
  connectionTime Int      @default(0) @map("connection_time") @db.UnsignedInt
  kills          Int      @default(0) @db.UnsignedInt
  deaths         Int      @default(0) @db.UnsignedInt
  suicides       Int      @default(0) @db.UnsignedInt
  skill          Int      @default(1000) @db.UnsignedInt
  shots          Int      @default(0) @db.UnsignedInt
  hits           Int      @default(0) @db.UnsignedInt
  game           String   @default("") @db.VarChar(32)
  headshots      Int      @default(0) @db.UnsignedInt
  teamkills      Int      @default(0) @map("team_kills") @db.UnsignedInt
  killStreak     Int      @default(0) @map("kill_streak")
  deathStreak    Int      @default(0) @map("death_streak")
  skillChange    Int      @default(0) @map("skill_change")

  player Player @relation(fields: [playerId], references: [playerId])

  @@unique([eventTime, playerId, game], name: "eventTime_playerId_game")
  @@index([playerId])
  @@map("players_history")
}

model PlayerRibbon {
  playerId Int    @map("player_id") @db.UnsignedInt
  ribbonId Int    @map("ribbon_id") @db.UnsignedInt
  game     String @db.VarChar(32)

  player Player @relation(fields: [playerId], references: [playerId])
  ribbon Ribbon @relation(fields: [ribbonId], references: [ribbonId])

  @@id([playerId, ribbonId, game])
  @@map("players_ribbons")
}

model Rank {
  rankId   Int    @id @default(autoincrement()) @map("rank_id") @db.UnsignedInt
  image    String @db.VarChar(30)
  minKills Int    @default(0) @map("min_kills") @db.UnsignedInt
  maxKills Int    @default(0) @map("max_kills") @db.UnsignedInt
  rankName String @map("rank_name") @db.VarChar(50)
  game     String @db.VarChar(32)

  @@unique([image, game], name: "rankgame")
  @@index([game(length: 8)], name: "game")
  @@map("ranks")
}

model Ribbon {
  ribbonId   Int    @id @default(autoincrement()) @map("ribbon_id") @db.UnsignedInt
  awardCode  String @map("award_code") @db.VarChar(50)
  awardCount Int    @default(0) @map("award_count")
  special    Int    @default(0) @map("special") @db.TinyInt
  game       String @db.VarChar(32)
  image      String @db.VarChar(50)
  ribbonName String @map("ribbon_name") @db.VarChar(50)

  playerRibbons PlayerRibbon[]

  @@unique([awardCode, awardCount, game, special], name: "award")
  @@map("ribbons")
}

model Role {
  roleId Int    @id @default(autoincrement()) @map("role_id") @db.UnsignedInt
  game   String @default("valve") @db.VarChar(32)
  code   String @default("") @db.VarChar(64)
  name   String @default("") @db.VarChar(64)
  hidden String @default("0") @db.VarChar(1) // ENUM('0','1')
  picked Int    @default(0) @db.UnsignedInt
  kills  Int    @default(0) @db.UnsignedInt
  deaths Int    @default(0) @db.UnsignedInt

  @@unique([game, code], name: "gamecode")
  @@map("roles")
}

model Server {
  serverId      Int       @id @default(autoincrement()) @map("server_id") @db.UnsignedInt
  address       String    @default("") @db.VarChar(32)
  port          Int       @default(0) @db.UnsignedInt
  name          String    @default("") @db.VarChar(255)
  sortOrder     Int       @default(0) @map("sort_order") @db.TinyInt
  game          String    @default("valve") @db.VarChar(32)
  publicAddress String    @default("") @map("public_address") @db.VarChar(128)
  statusUrl     String?   @map("status_url") @db.VarChar(255)
  rconPassword  String    @default("") @map("rcon_password") @db.VarChar(128)
  kills         Int       @default(0)
  players       Int       @default(0)
  rounds        Int       @default(0)
  suicides      Int       @default(0)
  headshots     Int       @default(0)
  bombsPlanted  Int       @default(0) @map("bombs_planted")
  bombsDefused  Int       @default(0) @map("bombs_defused")
  ctWins        Int       @default(0) @map("ct_wins")
  tsWins        Int       @default(0) @map("ts_wins")
  maxPlayers    Int       @default(0) @map("max_players") @db.SmallInt
  activePlayers Int       @default(0) @map("active_players") @db.SmallInt
  activeMap     String    @default("") @map("active_map") @db.VarChar(64)
  mapRounds     Int       @default(0) @map("map_rounds")
  mapCtWins     Int       @default(0) @map("map_ct_wins")
  mapTsWins     Int       @default(0) @map("map_ts_wins")
  mapStarted    Int       @default(0) @map("map_started")
  mapChanges    Int       @default(0) @map("map_changes")
  ctShots       Int       @default(0) @map("ct_shots")
  ctHits        Int       @default(0) @map("ct_hits")
  tsShots       Int       @default(0) @map("ts_shots")
  tsHits        Int       @default(0) @map("ts_hits")
  mapCtShots    Int       @default(0) @map("map_ct_shots")
  mapCtHits     Int       @default(0) @map("map_ct_hits")
  mapTsShots    Int       @default(0) @map("map_ts_shots")
  mapTsHits     Int       @default(0) @map("map_ts_hits")
  lat           Float?
  lng           Float?
  city          String    @default("") @db.VarChar(64)
  country       String    @default("") @db.VarChar(64)
  lastEvent     DateTime? @map("last_event") @db.DateTime(0)

  eventsAdmin              EventAdmin[]
  eventsChangeName         EventChangeName[]
  eventsChangeRole         EventChangeRole[]
  eventsChangeTeam         EventChangeTeam[]
  eventsChat               EventChat[]
  eventsConnect            EventConnect[]
  eventsDisconnect         EventDisconnect[]
  eventsEntry              EventEntry[]
  eventsFrag               EventFrag[]
  eventsLatency            EventLatency[]
  eventsPlayerAction       EventPlayerAction[]
  eventsPlayerPlayerAction EventPlayerPlayerAction[]
  eventsRcon               EventRcon[]
  eventsSuicide            EventSuicide[]
  eventsTeamBonus          EventTeamBonus[]
  eventsTeamkill           EventTeamkill[]
  configs                  ServerConfig[]
  loads                    ServerLoad[]

  @@unique([address, port], name: "addressport")
  @@map("servers")
}

model ServerConfig {
  serverConfigId Int    @unique @default(autoincrement()) @map("server_config_id") @db.UnsignedInt
  serverId       Int    @map("server_id") @db.UnsignedInt
  parameter      String @db.VarChar(50)
  value          String @db.VarChar(128)

  server Server @relation(fields: [serverId], references: [serverId])

  @@id([serverId, parameter])
  @@map("servers_config")
}

model ServerConfigDefault {
  parameter   String  @id @db.VarChar(50)
  value       String  @db.VarChar(128)
  description String? @db.MediumText

  @@map("servers_config_default")
}

model ServerLoad {
  serverId      Int     @default(0) @map("server_id") @db.UnsignedInt
  timestamp     Int     @default(0)
  activePlayers Int     @default(0) @map("active_players") @db.TinyInt
  minPlayers    Int     @default(0) @map("min_players") @db.TinyInt
  maxPlayers    Int     @default(0) @map("max_players") @db.TinyInt
  map           String? @db.VarChar(64)
  uptime        String  @default("0") @db.VarChar(10)
  fps           String  @default("0") @db.VarChar(10)

  server Server @relation(fields: [serverId], references: [serverId])

  @@id([serverId, timestamp])
  @@index([serverId])
  @@index([timestamp])
  @@map("servers_load")
}

model Team {
  teamId            Int     @id @default(autoincrement()) @db.UnsignedInt
  game              String  @default("valve") @db.VarChar(32)
  code              String  @default("") @db.VarChar(64)
  name              String  @default("") @db.VarChar(64)
  hidden            String  @default("0") @db.VarChar(1) // ENUM('0','1')
  playerlistBgcolor String? @map("playerlist_bgcolor") @db.VarChar(7)
  playerlistColor   String? @map("playerlist_color") @db.VarChar(7)
  playerlistIndex   Int     @default(0) @map("playerlist_index") @db.UnsignedTinyInt

  @@unique([game, code], name: "gamecode")
  @@map("teams")
}

model User {
  username String @id @db.VarChar(16)
  password String @db.VarChar(32)
  acclevel Int    @default(0)
  playerId Int    @unique @default(0) @map("player_id") @db.UnsignedInt

  player Player @relation(fields: [playerId], references: [playerId], onDelete: Cascade)

  @@map("users")
}

model Weapon {
  weaponId  Int    @id @default(autoincrement()) @db.UnsignedInt
  game      String @default("valve") @db.VarChar(32)
  code      String @default("") @db.VarChar(64)
  name      String @default("") @db.VarChar(128)
  modifier  Float  @default(1.00) @db.Float
  kills     Int    @default(0) @db.UnsignedInt
  headshots Int    @default(0) @db.UnsignedInt

  @@unique([game, code], name: "gamecode")
  @@index([code])
  @@index([modifier])
  @@map("weapons")
}
