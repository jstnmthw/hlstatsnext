/** @type {import('prisma-generator-pothos-codegen').Config} */
import { readFileSync, writeFileSync } from "fs"
import { glob } from "glob"

export const inputs = {
  outputFilePath: "./generated/graphql/pothos-inputs.ts",
  prismaImporter: `import { Prisma } from "@repo/database/client";`,
}

export const crud = {
  outputDir: "./generated/graphql/pothos-inputs",
  inputsImporter: `import * as Inputs from "@repo/database/graphql/inputs";`,
  resolverImports: `\nimport { db } from "@repo/database/client";`,
  prismaImporter: `import { Prisma } from "@repo/database/client";`,
  prismaCaller: "db",
}

export const global = {
  builderLocation: "@repo/database/builder",
  afterGenerate: () => {
    // Fix the incorrect builder import paths generated by the tool
    const generatedDir = "./generated/graphql/pothos-inputs"
    const files = glob.sync(`${generatedDir}/**/*.ts`, {
      ignore: ["**/node_modules/**"],
    })

    files.forEach((filePath) => {
      const content = readFileSync(filePath, "utf8")

      // Replace any builder import with relative paths (../../../../ etc.) with the correct package import
      const fixedContent = content.replace(
        /import\s+{\s*builder\s*}\s+from\s+['"](?:\.\.\/)*[^'"]*builder['"];?/g,
        `import { builder } from '@repo/database/builder';`,
      )

      if (content !== fixedContent) {
        console.log(`âœ… Fixed builder import in: ${filePath}`)
        writeFileSync(filePath, fixedContent, "utf8")
      }
    })
  },
}
