// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Legacy HLStatsX database schema - exact mirror for compatibility
// DO NOT MODIFY - Must match existing database structure exactly

model Game {
  code     String @id // Primary key, e.g., "tf", "css", "csgo"
  name     String @db.VarChar(128) // e.g., "Team Fortress 2"
  hidden   String @default("0") @db.VarChar(1) // enum('0','1') in MySQL
  realgame String @default("hl2mp") @db.VarChar(32) // Engine type: "tf", "css", etc.

  // Relationships
  players Player[]
  clans   Clan[]

  @@map("hlstats_Games")
}

model Country {
  flag String @id @db.VarChar(16) // "US", "CA", etc.
  name String @db.VarChar(50) // "United States", "Canada"

  // Relationships
  players Player[]

  @@map("hlstats_Countries")
}

model Clan {
  clanId    Int    @id @default(autoincrement()) @db.UnsignedInt
  tag       String @default("") @db.VarChar(64) // Clan tag like "[TAG]"
  name      String @default("") @db.VarChar(128) // Full clan name
  homepage  String @default("") @db.VarChar(64) // Clan website
  game      String @default("") @db.VarChar(32)
  gameData  Game   @relation(fields: [game], references: [code], onDelete: Cascade)
  hidden    Int    @default(0) @db.UnsignedTinyInt // tinyint(3) unsigned
  mapregion String @default("") @db.VarChar(128) // Geographic region

  // Relationships
  players Player[]

  // Constraints
  @@unique([game, tag], name: "game_tag") // Unique tag per game
  @@index([game], name: "game")
  @@map("hlstats_Clans")
}

model Player {
  playerId Int @id @default(autoincrement()) @db.UnsignedInt

  // Event tracking
  last_event        Int @default(0) @db.Int
  connection_time   Int @default(0) @db.UnsignedInt
  last_skill_change Int @default(0) @db.Int

  // Identity
  lastName    String  @default("") @db.VarChar(64) // Current display name
  lastAddress String  @default("") @db.VarChar(32) // Last known IP address
  fullName    String? @db.VarChar(128) // Optional full/real name
  email       String? @db.VarChar(64) // Optional email
  homepage    String? @db.VarChar(64) // Optional homepage
  icq         Int?    @db.UnsignedInt // Legacy ICQ number

  // Location data
  city    String @default("") @db.VarChar(64)
  state   String @default("") @db.VarChar(64)
  country String @default("") @db.VarChar(64)
  flag    String @default("") @db.VarChar(16)
  lat     Float? @db.Float
  lng     Float? @db.Float

  // Country relationship
  countryData Country? @relation(fields: [flag], references: [flag])

  // Clan relationship
  clan     Int   @default(0) @db.UnsignedInt
  clanData Clan? @relation(fields: [clan], references: [clanId])

  // Core statistics
  kills     Int @default(0) @db.UnsignedInt
  deaths    Int @default(0) @db.UnsignedInt
  suicides  Int @default(0) @db.UnsignedInt
  skill     Int @default(1000) @db.UnsignedInt // ELO-style rating
  shots     Int @default(0) @db.UnsignedInt
  hits      Int @default(0) @db.UnsignedInt
  teamkills Int @default(0) @db.UnsignedInt
  headshots Int @default(0) @db.UnsignedInt

  // Streaks and activity
  kill_streak  Int @default(0) @db.Int
  death_streak Int @default(0) @db.Int
  activity     Int @default(100) @db.Int

  // Game relationship
  game     String @db.VarChar(32)
  gameData Game   @relation(fields: [game], references: [code], onDelete: Cascade)

  // Player preferences
  hideranking   Int @default(0) @db.UnsignedInt // int(1) unsigned
  displayEvents Int @default(1) @db.UnsignedInt // int(1) unsigned
  blockavatar   Int @default(0) @db.UnsignedInt // int(1) unsigned

  // Additional fields
  mmrank     Int? @db.TinyInt // Matchmaking rank
  createdate Int  @default(0) @db.Int

  // Relationships
  uniqueIds PlayerUniqueId[]

  // Indexes for performance
  @@index([clan, playerId], name: "playerclan")
  @@index([skill], name: "skill")
  @@index([game], name: "game")
  @@index([kills], name: "kills")
  @@index([hideranking], name: "hideranking")
  @@map("hlstats_Players")
}

model PlayerUniqueId {
  playerId Int    @db.UnsignedInt
  player   Player @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
  uniqueId String @default("") @db.VarChar(64) // Steam ID, Discord ID, etc.
  game     String @default("") @db.VarChar(32) // Which game this ID is for
  merge    Int?   @db.UnsignedInt // For account merging functionality

  // Constraints - unique ID per game (PRIMARY KEY in legacy)
  @@id([uniqueId, game])
  @@index([playerId], name: "playerId")
  @@map("hlstats_PlayerUniqueIds")
}
