---
globs: apps/web/*
alwaysApply: false
---

# Next.js 15 SSR Standards

## Apply general coding principles and best practices for TypeScript and React development across the project.

- Write concise, readable TypeScript code.
- Use functional and declarative programming patterns.
- Follow DRY (Don't Repeat Yourself) principle.
- Implement early returns for better readability.
- Structure components logically: exports, subcomponents, helpers, types.
- Use descriptive names with auxiliary verbs (isLoading, hasError).
- Prefix event handlers with 'handle' (handleClick, handleSubmit).
- Use TypeScript for all code.
- Prefer interfaces over types.
- Avoid enums; use const maps instead.
- Implement proper type safety and inference.
- Use `satisfies` operator for type validation.

## Dictates how asynchronous requests should be handled within Next.js 15, specifically concerning runtime APIs.

- Always use async versions of runtime APIs:
  ```typescript
  const cookieStore = await cookies()
  const headersList = await headers()
  const { isEnabled } = await draftMode()
  ```
- Handle async params in layouts/pages:
  ```typescript
  const params = await props.params
  const searchParams = await props.searchParams
  ```

## Specifies the best practices for building React components within the Next.js 15 App Router structure.

- Favor React Server Components (RSC) where possible.
- Minimize 'use client' directives.
- Implement proper error boundaries.
- Use Suspense for async operations.
- Optimize for performance and Web Vitals.

## Defines the recommended state management strategies for Next.js 15 applications, including server and client contexts.

- Use `useActionState` instead of deprecated `useFormState`.
- Leverage enhanced `useFormStatus` with new properties (data, method, action).
- Implement URL state management with 'nuqs'.
- Minimize client-side state.

## Enforce a consistent naming convention for directories across the project.

- Use lowercase with dashes for directories (components/auth-wizard)

## Feedback

- Adapt suggestions based on user feedback. Address recurring issues with simpler or alternative solutions. Clarify ambiguous feedback via @ references.

## Uncertainty

- If no clear answer exists, state: “No definitive solution is available.” If unknown, say: “I lack sufficient information. Please provide details (e.g., @app/page.tsx).” Suggest next steps (e.g., consult Next.js docs).
