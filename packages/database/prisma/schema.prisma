// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modern schema design based on legacy HLStatsX database
// Phase 1.3: Database Design and Prisma Setup - Essential Player relationships

model Game {
  code     String  @unique // e.g., "tf", "css", "csgo"
  name     String // e.g., "Team Fortress 2"
  realGame String // Engine type: "tf", "css", etc.
  hidden   Boolean @default(false)

  // Relationships
  players Player[]
  clans   Clan[]

  @@map("hlstats_Games")
}

model Country {
  name String // "United States", "Canada"
  flag String @unique // "US", "CA", etc.

  // Relationships
  players Player[]

  @@map("hlstats_Countries")
}

model Clan {
  clanId    String  @id @default(cuid())
  tag       String // Clan tag like "[TAG]"
  name      String // Full clan name
  homepage  String? // Optional clan website
  game      String
  gameData  Game    @relation(fields: [game], references: [code], onDelete: Cascade)
  hidden    Boolean @default(false)
  mapRegion String? // Geographic region

  // Relationships
  players Player[]

  // Legacy compatibility
  legacyId Int? @unique // Preserve original clan ID for migration

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Constraints
  @@unique([game, tag]) // Unique tag per game
  @@map("hlstats_Clans")
}

model Player {
  playerId String @id @default(cuid())

  // Identity
  lastName String // Current display name
  fullName String? // Optional full/real name
  email    String? // Optional email
  homepage String? // Optional homepage

  // Game relationship
  game     String
  gameData Game   @relation(fields: [game], references: [code], onDelete: Cascade)

  // Location data
  lastAddress String? // Last known IP address
  city        String?
  state       String?
  country     String?
  countryData Country? @relation(fields: [country], references: [flag])
  lat         Float?   @db.Float
  lng         Float?   @db.Float

  // Clan relationship (optional)
  clan     String?
  clanData Clan?   @relation(fields: [clan], references: [clanId])

  // Core statistics
  skill     Int @default(1000) // ELO-style rating
  kills     Int @default(0) @db.UnsignedInt
  deaths    Int @default(0) @db.UnsignedInt
  suicides  Int @default(0) @db.UnsignedInt
  shots     Int @default(0) @db.UnsignedInt
  hits      Int @default(0) @db.UnsignedInt
  headshots Int @default(0) @db.UnsignedInt
  teamkills Int @default(0) @db.UnsignedInt

  // Streaks and activity
  killStreak  Int @default(0)
  deathStreak Int @default(0)
  activity    Int @default(100) // Activity level 0-100

  // Player preferences
  hideRanking   Boolean @default(false)
  displayEvents Boolean @default(true)
  blockAvatar   Boolean @default(false)

  // Game tracking
  connectionTime  Int @default(0) @db.UnsignedInt // Total connection time
  lastEvent       Int @default(0) // Timestamp of last event
  lastSkillChange Int @default(0) // Timestamp of last skill change

  // Additional fields
  icq    Int? @db.UnsignedInt // Legacy ICQ number
  mmrank Int? @db.TinyInt // Matchmaking rank

  // Relationships
  uniqueIds PlayerUniqueId[]

  // Legacy compatibility
  legacyId Int? @unique // Preserve original player ID for migration

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([game, skill], name: "game_skill_idx")
  @@index([game, kills], name: "game_kills_idx")
  @@index([hideRanking], name: "hide_ranking_idx")
  @@index([clan], name: "clan_idx")
  @@index([lastEvent], name: "last_event_idx")
  @@map("hlstats_Players")
}

model PlayerUniqueId {
  id       String  @id @default(cuid())
  playerId String
  player   Player  @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
  uniqueId String // Steam ID, Discord ID, etc.
  game     String // Which game this ID is for
  mergeId  String? // For account merging functionality

  // Legacy compatibility  
  legacyPlayerId Int? // Original player ID for migration reference

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Constraints - unique ID per game
  @@unique([uniqueId, game], name: "unique_id_per_game")
  @@index([playerId], name: "player_idx")
  @@map("hlstats_PlayerUniqueIds")
}
