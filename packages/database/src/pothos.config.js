/** @type {import('prisma-generator-pothos-codegen').Config} */
import { readFileSync, writeFileSync } from "fs"
import { glob } from "glob"

export const inputs = {
  outputFilePath: "./generated/graphql/pothos-inputs.ts",
  prismaImporter: `import { Prisma } from "@prisma/client";`,
}

export const crud = {
  outputDir: "./generated/graphql/pothos-inputs",
  inputsImporter: `import * as Inputs from '../../pothos-inputs';`,
  resolverImports: `\nimport { db } from "../src/client";`,
  prismaImporter: `import { Prisma } from "@prisma/client";`,
  prismaCaller: "db",
}

export const global = {
  builderLocation: "../../../builder/src/index",
  replacer: (generated) => {
    return `/* eslint-disable @typescript-eslint/ban-ts-comment */
// @ts-nocheck
/* eslint-disable */\n${generated}`
  },
  afterGenerate: () => {
    // Fix the incorrect builder import paths generated by the tool
    const generatedDir = "./generated/graphql/pothos-inputs"
    const files = glob.sync(`${generatedDir}/**/*.ts`, {
      ignore: ["**/node_modules/**"],
    })

    files.forEach((filePath) => {
      try {
        const content = readFileSync(filePath, "utf8")

        // Replace the incorrect relative path with the correct package import
        const fixedContent = content.replace(
          /import\s+{\s*builder\s*}\s+from\s+['"][^'"]*@repo\/builder['"];?/g,
          `import { builder } from '@repo/builder';`,
        )

        if (content !== fixedContent) {
          writeFileSync(filePath, fixedContent, "utf8")
          console.log(`Fixed builder import in: ${filePath}`)
        }
      } catch (error) {
        console.warn(`Failed to process file ${filePath}:`, error.message)
      }
    })

    console.log("âœ… Fixed all builder import paths")
  },
}
