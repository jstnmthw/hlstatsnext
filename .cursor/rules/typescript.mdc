---
description: 
globs: *.tsx,*.ts
alwaysApply: false
---
# TypeScript Best Practices for HLStatsNext

## Apply strict TypeScript standards and architectural patterns for scalable, maintainable code.

### Core TypeScript Principles

- Use explicit types for function parameters and return values
- Prefer `satisfies` operator for type validation while preserving inference
- Avoid `any` - use `unknown` for truly unknown types
- Prefer interfaces over types for object shapes
- Use const assertions (`as const`) for immutable data structures
- Always enable strict TypeScript configuration

### Null and Undefined Handling

- Handle null/undefined explicitly with proper checks
- Use nullish coalescing (`??`) over logical OR (`||`) for default values
- Convert GraphQL nulls to undefined for Prisma: `value ?? undefined`
- Use optional chaining (`?.`) for safe property access
- Use `if (value != null)` for combined null/undefined checks

### Error Handling Patterns

- Always use Result pattern for operations that can fail:
  ```typescript
  type Result<T, E> = { success: true; data: T } | { success: false; error: E };
  ```
- Define specific error types with discriminated unions
- Include operation context in error messages
- Handle errors at service boundaries, not in resolvers

### Service Layer Architecture

- Keep GraphQL resolvers thin - delegate complex logic to services
- Use services for business logic, transactions, and complex queries
- Handle simple CRUD operations directly in GraphQL resolvers
- Services should return Result types for consistent error handling
- Name service methods clearly: `calculatePlayerRank()` not `getPlayerRank()`

### GraphQL with Pothos Best Practices

- Use `builder.prismaObject()` for automatic Prisma integration
- Add GraphQL `id` field mapped to database primary keys
- Use computed fields for derived data rather than database storage
- Always validate and sanitize GraphQL inputs
- Convert nullable inputs: `input.field ?? undefined`
- Use proper null checks: `if (input.field !== undefined && input.field !== null)`

### Prisma Integration

- Use `...query` parameter in Pothos resolvers for automatic field selection
- Avoid N+1 queries with proper `include` usage
- Cap query limits: `take: Math.min(limit, MAX_LIMIT)`
- Use Prisma-generated types as source of truth
- Re-export Prisma types from centralized type files

### Code Organization

- Structure types in dedicated directories: `types/common/`, `types/database/`, `types/graphql/`
- Use index files for clean re-exports
- Prefer named exports over default exports
- Group imports: external libraries, internal modules, relative imports
- Use type-only imports: `import type { Type } from './module'`

### Naming Conventions

- Use descriptive names with auxiliary verbs: `isLoading`, `hasError`, `canAccess`
- Prefix event handlers with 'handle': `handleClick`, `handleSubmit`
- Use verb-noun pattern for functions: `calculateTotal`, `validateEmail`
- Prefer full words over abbreviations
- Use clear boolean names: `isAuthenticated` not `auth`

### Data Transformation

- Use readonly modifiers for immutable data
- Prefer spread operator over mutation: `{ ...obj, newProp: value }`
- Use conditional spread for optional properties:
  ```typescript
  const data = {
    required: input.required,
    ...(input.optional && { optional: input.optional }),
  };
  ```

### Performance Considerations

- Avoid deeply nested conditional types
- Use type aliases for complex union types
- Implement proper caching for expensive operations
- Use database indexes for frequently queried fields
- Implement pagination for large datasets

### Documentation

- Document complex business logic with WHY, not WHAT
- Use JSDoc for public APIs and service methods
- Include examples for complex type definitions
- Document assumptions about external data structures

### Testing Patterns

- Use TypeScript compiler to catch type errors in tests
- Test Result pattern success and failure cases
- Mock services with correct return types
- Use type assertions sparingly

## Feedback

- Prioritize type safety over convenience
- Enforce consistent error handling patterns
- Maintain clear separation between GraphQL layer and business logic
- Focus on maintainable, self-documenting code

## Uncertainty

- When type issues arise, prefer explicit typing over type assertions
- For complex business logic, delegate to services rather than inline resolvers
- Consult Prisma documentation for optimal query patterns
- Use Result pattern for any operation that can fail
