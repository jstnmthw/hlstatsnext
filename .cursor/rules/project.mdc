---
description: 
globs: 
alwaysApply: false
---
# Core Principles

Review [DEVELOPMENT_BEST_PRACTICES.md](mdc:apps/daemon-v2/docs/DEVELOPMENT_BEST_PRACTICES.md).

## 1. Clean Architecture from Day One

- **Turbo Repo monorepo** - Shared packages and applications for maximum code reuse
- **TypeScript-first development** - Strict typing throughout the entire stack
- **Server Components by default** - Leverage Next.js 15 SSR capabilities
- **GraphQL API layer** - Flexible, efficient data querying

## 2. Database-First Development

- **Prisma as single source of truth** - Database schema drives TypeScript types
- **Automated type generation** - Zero manual type definitions for database entities
- **Modern database design** - Clean schema optimized for performance
- **Migration-ready architecture** - Easy data import from legacy system

## 3. Essential-First Approach

- **Core functionality prioritized** - Get basic features working first
- **Admin tools second** - Management interface for configuration
- **Extended features third** - Advanced statistics and visualizations
- **Polish last** - Performance optimization and UX refinements

---

# Architecture Overview

## Technology Stack

- **Monorepo**: Turbo Repo for package management and build optimization
- **Frontend**: Next.js 15 (App Router) + TypeScript + Tailwind CSS
- **API**: GraphQL Yoga + TypeScript + Prisma ORM
- **Database**: MySQL with modern schema design
- **Daemon**: Existing pearl service for real-time game server monitoring
- **Validation**: Zod for runtime type safety
- **Testing**: Vitest + Playwright + React Testing Library

## Turbo Repo Structure

```
hlstatsnext/
├── apps/
│   ├── web/              # Next.js 15 frontend application
│   ├── api/              # GraphQL API server
│   └── daemon/           # Game server monitoring daemon
├── packages/
│   ├── ui/               # Shared React components
│   ├── config/           # Shared configuration and constants
│   └── database/         # Prisma schema and utilities
├── tools/
│   ├── eslint-config/    # Shared ESLint configuration
│   └── typescript-config/ # Shared TypeScript configuration
└── docs/                 # Documentation and API specs
```
